/**
 * To use this when setting up GitHub Actions, make sure to define the following secrets:
 *
 * SONATYPE_USERNAME
 * SONATYPE_PASSWORD
 * BINTRAY_USER
 * BINTRAY_KEY
 * GPG_KEY_ID
 * GPG_PASSWORD
 *
 * For the GPG file, encode it as Base 64:
 * $ base64 ~/.gnupg/secring.gpg | pbcopy
 *
 * Then store that as a secret named GPG_FILE. Finally, as part of the workflow, restore the file in the project root as:
 * echo $GPG_FILE | base64 -d > secring.gpg 
 */

apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.bmuschko.nexus'
apply plugin: 'maven-publish'

ext.extraPomInfo = {}
ext.pomInfo = {
    delegate.name project.title
    delegate.description project.projectDesc
    delegate.url projectUrl

    delegate.licenses {
        delegate.license {
            delegate.name 'The Apache Software License, Version 2.0'
            delegate.url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            delegate.distribution 'repo'
        }
    }

    delegate.scm {
        delegate.url "scm:git@github.com:${githubSlug}.git"
        delegate.connection "scm:git@github.com:${githubSlug}.git"
        delegate.developerConnection "scm:git@github.com:${githubSlug}.git"
    }

    if(developers) {
        delegate.developers {
            for(dev in developers.split(',')) {
                delegate.developer {
                    delegate.id dev.toLowerCase().replace(' ', '')
                    delegate.name dev
                }
            }
        }
    }
    ext.extraPomInfo.delegate = delegate
    ext.extraPomInfo.call()
}

modifyPom {
    project(pomInfo)
}

publishing {

    repositories {
        maven {
            credentials {
                def bintrayUser = System.getenv("BINTRAY_USER") ?: project.hasProperty("bintrayUser") ? project.bintrayUser : ''
                def bintrayKey = System.getenv("BINTRAY_KEY") ?: project.hasProperty("bintrayKey") ? project.bintrayKey : ''
                username = bintrayUser
                password = bintrayKey
            }
            url  "https://oss.jfrog.org/oss-snapshot-local"
        }
    }

    publications {
        maven(MavenPublication) { publication ->
            String artifactIdPrefix = System.getenv("ARTIFACT_ID_PREFIX") ?: project.hasProperty("artifactIdPrefix") ? project.artifactIdPrefix : 'micronaut-'
            String organizationGroup = System.getenv("ORGANIZATION_GROUP") ?: project.hasProperty("organizationGroup") ? project.organizationGroup : 'io.micronaut'
            artifactId( artifactIdPrefix + project.name.substring(project.name.indexOf('/') + 1) )
            def shadowJar = tasks.findByName("shadowJar")
            if(shadowJar) {
                artifact(project.tasks.shadowJar) {
                    classifier = null
                }
                pom.withXml { xml ->
                    def xmlNode = xml.asNode()
                    def dependenciesNode = xmlNode.appendNode('dependencies')

                    project.configurations.shadow.allDependencies.each {
                        if (! (it instanceof SelfResolvingDependency)) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            if (it.group.startsWith(organizationGroup)) {
                                dependencyNode.appendNode('artifactId', "${artifactIdPrefix}$it.name")
                            } else {
                                dependencyNode.appendNode('artifactId', it.name)
                            }
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'runtime')
                        }
                    }
                    project.configurations.shadowCompile.allDependencies.each {
                        if (! (it instanceof SelfResolvingDependency)) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'compile')
                        } else if(it instanceof ProjectDependency) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', project.group)
                            dependencyNode.appendNode('artifactId', "${artifactIdPrefix}$it.name")
                            dependencyNode.appendNode('version', project.version)
                            dependencyNode.appendNode('scope', 'compile')

                        }
                    }
                    project.configurations.shadowRuntime.allDependencies.each {
                        if (! (it instanceof SelfResolvingDependency)) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'runtime')
                        } else if(it instanceof ProjectDependency) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', project.group)
                            dependencyNode.appendNode('artifactId', "${artifactIdPrefix}$it.name")
                            dependencyNode.appendNode('version', project.version)
                            dependencyNode.appendNode('scope', 'runtime')

                        }
                    }
                    xmlNode.children().last() + pomInfo
                }
                afterEvaluate {

                    artifact sourcesJar {
                        classifier "sources"
                    }
                    artifact javadocJar {
                        classifier "javadoc"
                    }
                }

            } else {
                from components.java
                afterEvaluate {
                    artifact source: sourcesJar, classifier: "sources"
                    artifact source: javadocJar, classifier: "javadoc"
                }

                pom.withXml {
                    def xml = asNode()

                    xml.children().last() + pomInfo
                }
            }

        }
    }
}

def bintrayUser = System.getenv("BINTRAY_USER") ?: project.hasProperty("bintrayUser") ? project.bintrayUser : ''
def bintrayKey = System.getenv("BINTRAY_KEY") ?: project.hasProperty("bintrayKey") ? project.bintrayKey : ''
def bintrayRepo = System.getenv("BINTRAY_REPO") ?: project.hasProperty("bintrayRepo") ? project.bintrayRepo : 'core-releases-local'
def bintrayUserOrg = System.getenv("BINTRAY_USERORG") ?: project.hasProperty("bintrayUserOrg") ? project.bintrayUserOrg : 'micronaut'
def organizationGroup = System.getenv("ORGANIZATION_GROUP") ?: project.hasProperty("organizationGroup") ? project.organizationGroup : 'io.micronaut'
def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
ext."signing.keyId" = System.getenv("GPG_KEY_ID") ?: project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : null
ext."signing.password" = System.getenv("GPG_PASSWORD") ?: project.hasProperty("signing.password") ? project.getProperty('signing.password') : null

if (file("${rootDir}/secring.gpg").exists()) {
    ext."signing.secretKeyRingFile" = file("${rootDir}/secring.gpg").absolutePath
} else if (file("${System.getenv('HOME')}/.gnupg/secring.gpg").exists()){
    ext."signing.secretKeyRingFile" = file("${System.getenv('HOME')}/.gnupg/secring.gpg").absolutePath
}
    
import java.time.Duration

if (ossUser && ossPass && ext."signing.keyId" && ext."signing.password") {
    apply plugin: "de.marcphilipp.nexus-publish"
    apply plugin: 'signing'

    signing {
        sign publishing.publications.maven
    }

    rootProject.plugins.apply('io.codearte.nexus-staging')
    def extension = rootProject.extensions.getByName("nexusStaging")
    extension.with {
        username = ossUser
        password = ossPass
        packageGroup = organizationGroup
        numberOfRetries = 500
    }

    nexusPublishing {
        repositories {
            sonatype {
                username = ossUser
                password = ossPass
            }
        }
        connectTimeout = Duration.ofMinutes(30)
        clientTimeout = Duration.ofMinutes(30)
    }

    initializeSonatypeStagingRepository {
        timeout = Duration.ofMinutes(30)
    }
}

bintray {

    user = bintrayUser
    key = bintrayKey
    publications = ['maven']
    publish = true
    pkg {
        repo = bintrayRepo
        userOrg = bintrayUserOrg
        name = project.name
        desc = "${project.title} - ${project.projectDesc} - ${project.name} module".toString()
        websiteUrl = projectUrl
        issueTrackerUrl = "https://github.com/$githubSlug/issues"
        vcsUrl = "https://github.com/$githubSlug"
        licenses = ['Apache-2.0']
        publicDownloadNumbers = true
        version {
            name = project.version
            gpg {
                sign = true
                passphrase = System.getenv("SIGNING_PASSPHRASE") ?: project.hasProperty("signingPassphrase") ? project.signingPassphrase : ''
            }
        }
    }
}

if (!project.version.endsWith("-SNAPSHOT")) {
    // disable remote publish for non-snapshot versions
    // since releases are published to bintray
    publishMavenPublicationToMavenRepository.enabled = false
}