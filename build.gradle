buildscript {
    repositories {
        gradlePluginPortal()
        jcenter()
        maven { url "https://dl.bintray.com/micronaut/core-releases-local" }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "io.micronaut.build:micronaut-gradle-plugins:2.0.10"
    }
}
plugins {
    id 'groovy-gradle-plugin'
    id 'groovy'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.5"
}

repositories {
    jcenter()
    maven { url "https://repo.grails.org/grails/core" }
}

apply plugin: "io.micronaut.build.dependency-updates"

dependencies {
    implementation "org.grails:grails-docs:$grailsVersion"
    implementation "io.github.groovylang.groovydoc:groovydoc-gradle-plugin:1.0.1"
    implementation "io.micronaut.docs:micronaut-docs-asciidoc-extensions:$micronautDocsVersion", {
        exclude group: "org.codehaus.groovy"
    }
    implementation "io.micronaut.docs:micronaut-docs-gradle-plugins:$micronautDocsVersion", {
        exclude group: "com.github.jengelman.gradle.plugins"
        exclude group: "org.codehaus.groovy"
    }
    implementation "io.spring.nohttp:nohttp-gradle:0.0.5.RELEASE"
    implementation "com.github.ben-manes:gradle-versions-plugin:0.30.0"
    implementation "com.diffplug.spotless:spotless-plugin-gradle:5.3.0"
    implementation "com.adarshr:gradle-test-logger-plugin:2.1.0"
    implementation "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5", {
        exclude group: 'xerces', module: 'xercesImpl'
    }
    implementation "de.marcphilipp.gradle:nexus-publish-plugin:0.4.0"
    implementation "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.22.0", {
        exclude group: 'xerces', module: 'xercesImpl'
    }
    implementation "com.bmuschko:gradle-nexus-plugin:2.3.1"
    implementation "se.patrikerdes:gradle-use-latest-versions-plugin:0.2.14"
    testImplementation platform("org.spockframework:spock-bom:1.3-groovy-2.5")
    testImplementation "org.spockframework:spock-core"
}

configurations.all {
    resolutionStrategy {
        componentSelection {
            withModule("xerces:xercesImpl") { ComponentSelection selection ->
                selection.reject("No xerces")
            }
        }
        force "org.grails:grails-docs:${grailsVersion}"
    }
}

gradlePlugin {
    // Define the plugins
    plugins {
        common {
            id = 'io.micronaut.build.common'
            implementationClass = 'io.micronaut.build.MicronautBuildCommonPlugin'
        }
        publishing {
            id = 'io.micronaut.build.publishing'
            implementationClass = 'io.micronaut.build.MicronautPublishingPlugin'
        }
        dependencyUpdates {
            id = 'io.micronaut.build.dependency-updates'
            implementationClass = 'io.micronaut.build.MicronautDependencyUpdatesPlugin'
        }
        docs {
            id = 'io.micronaut.build.docs'
            implementationClass = 'io.micronaut.build.MicronautDocsPlugin'
        }
    }
}

version project.projectVersion
group "io.micronaut.build"

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

def bintrayUser = System.getenv("BINTRAY_USER") ?: project.hasProperty("bintrayUser") ? project.bintrayUser : ''
def bintrayKey = System.getenv("BINTRAY_KEY") ?: project.hasProperty("bintrayKey") ? project.bintrayKey : ''

publishing {
    repositories {
        maven {
            credentials {
                username = bintrayUser
                password = bintrayKey
            }
            url  "https://oss.jfrog.org/oss-snapshot-local"
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = 'micronaut-gradle-plugins'
            version = project.version

            from components.java
        }
    }
}

bintray {
    user = bintrayUser
    key = bintrayKey
    publications = ['maven']
    publish = true
    pkg {
        repo = 'core-releases-local'
        userOrg = 'micronaut'
        name = project.name
        desc = "${project.title} - ${project.projectDesc} - ${project.name} module".toString()
        websiteUrl = projectUrl
        issueTrackerUrl = "https://github.com/$githubSlug/issues"
        vcsUrl = "https://github.com/$githubSlug"
        licenses = ['Apache-2.0']
        publicDownloadNumbers = true
        version {
            name = project.version
            gpg {
                sign = true
                passphrase = System.getenv("SIGNING_PASSPHRASE") ?: project.hasProperty("signingPassphrase") ? project.signingPassphrase : ''
            }
        }
    }
}

