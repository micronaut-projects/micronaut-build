buildscript {
    repositories {
        gradlePluginPortal()
        jcenter()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "io.micronaut.build:micronaut-gradle-plugins:2.0.16"
    }
}
plugins {
    id 'groovy-gradle-plugin'
    id 'groovy'
    id 'maven-publish'
    id("io.github.gradle-nexus.publish-plugin") version "1.1.0"
    id 'signing'
}

repositories {
    jcenter()
    maven { url "https://repo.grails.org/grails/core" }
}

apply plugin: "io.micronaut.build.dependency-updates"

dependencies {
    implementation "org.grails:grails-docs:$grailsVersion"
    implementation "io.github.groovylang.groovydoc:groovydoc-gradle-plugin:1.0.1"
    implementation "io.micronaut.docs:micronaut-docs-asciidoc-extensions:$micronautDocsVersion", {
        exclude group: "org.codehaus.groovy"
    }
    implementation "io.micronaut.docs:micronaut-docs-gradle-plugins:$micronautDocsVersion", {
        exclude group: "com.github.jengelman.gradle.plugins"
        exclude group: "org.codehaus.groovy"
    }
    implementation "io.spring.nohttp:nohttp-gradle:0.0.6.RELEASE"
    implementation "com.github.ben-manes:gradle-versions-plugin:0.38.0"
    implementation "com.diffplug.spotless:spotless-plugin-gradle:5.12.4"
    implementation "com.adarshr:gradle-test-logger-plugin:3.0.0"
    implementation "io.github.gradle-nexus:publish-plugin:1.1.0"
    implementation "se.patrikerdes:gradle-use-latest-versions-plugin:0.2.16"
    testImplementation platform("org.spockframework:spock-bom:1.3-groovy-2.5")
    testImplementation "org.spockframework:spock-core"
}

configurations.all {
    resolutionStrategy {
        componentSelection {
            withModule("xerces:xercesImpl") { ComponentSelection selection ->
                selection.reject("No xerces")
            }
        }
        force "org.grails:grails-docs:${grailsVersion}"
    }
}

gradlePlugin {
    // Define the plugins
    plugins {
        common {
            id = 'io.micronaut.build.internal.common'
            implementationClass = 'io.micronaut.build.MicronautBuildCommonPlugin'
        }
        publishing {
            id = 'io.micronaut.build.internal.publishing'
            implementationClass = 'io.micronaut.build.MicronautPublishingPlugin'
        }
        dependencyUpdates {
            id = 'io.micronaut.build.internal.dependency-updates'
            implementationClass = 'io.micronaut.build.MicronautDependencyUpdatesPlugin'
        }
        docs {
            id = 'io.micronaut.build.internal.docs'
            implementationClass = 'io.micronaut.build.MicronautDocsPlugin'
        }
    }
}

version project.projectVersion
group "io.micronaut.build.internal"

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

java {
    withJavadocJar()
    withSourcesJar()
}

def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
ext."signing.keyId" = System.getenv("GPG_KEY_ID") ?: project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : null
ext."signing.password" = System.getenv("GPG_PASSWORD") ?: project.hasProperty("signing.password") ? project.getProperty('signing.password') : null
if (file("${rootDir}/secring.gpg").exists()) {
    ext."signing.secretKeyRingFile" = file("${rootDir}/secring.gpg").absolutePath
} else if (file("${System.getenv('HOME')}/.gnupg/secring.gpg").exists()){
    ext."signing.secretKeyRingFile" = file("${System.getenv('HOME')}/.gnupg/secring.gpg").absolutePath
}

nexusPublishing {
    repositories {
        sonatype {
            username = ossUser
            password = ossPass
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            stagingProfileId = "11bd7bc41716aa" //can reduce execution time by even 10 seconds
        }
    }
}

Closure pomInfo = {
    name = 'Micronaut internal build plugins'
    description = "Micronaut internal build plugins. Not intended to be used in user's projects"
    url = 'https://github.com/micronaut-projects/micronaut-build'
    inceptionYear = '2020'
    licenses {
        license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }
    developers {
        developer {
            id = 'alvarosanchez'
            name = 'Álvaro Sánchez-Mariscal Arnaiz'
        }
    }
    scm {
        connection = 'scm:https://github.com/micronaut-projects/micronaut-build.git'
        developerConnection = 'scm:git@github.com:micronaut-projects/micronaut-build.git'
        url = 'https://github.com/micronaut-projects/micronaut-build'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = 'micronaut-gradle-plugins'
            version = project.version

            from components.java
            pom pomInfo
        }
    }
}

afterEvaluate {
    signing {
        required { !project.version.endsWith("-SNAPSHOT") && !project.hasProperty("skipSigning") }
        publishing.publications.each {
            sign it
        }
    }

    publishing.publications.withType(MavenPublication) { MavenPublication pub ->
        pub.pom pomInfo
    }

    tasks.withType(Sign) {
        onlyIf { !project.version.endsWith("-SNAPSHOT") }
    }
}

//do not generate extra load on Nexus with new staging repository if signing fails
tasks.withType(io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository).configureEach {
    shouldRunAfter(tasks.withType(Sign))
}


