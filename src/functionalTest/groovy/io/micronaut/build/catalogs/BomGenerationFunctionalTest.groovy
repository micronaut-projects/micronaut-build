package io.micronaut.build.catalogs

import groovy.xml.XmlSlurper
import io.micronaut.build.AbstractFunctionalTest
import spock.lang.Issue
import spock.lang.Unroll

class BomGenerationFunctionalTest extends AbstractFunctionalTest {
    def "inlines Micronaut catalogs into the generated catalog"() {
        
        given:
        withSample("test-bom-module")

        when:
        run 'publishAllPublicationsToBuildRepository'

        then:
        def moduleDir = file("build/repo/io/micronaut/dummy/micronaut-test-bom-module/1.2.3")
        def catalogFile = new File(moduleDir, "micronaut-test-bom-module-1.2.3.toml")
        moduleDir.exists()
        catalogFile.exists()
        catalogFile.text.trim() == """#
                                     |# This file has been generated by Gradle and is intended to be consumed by Gradle
                                     |#
                                     |[metadata]
                                     |format.version = "1.1"
                                     |
                                     |[versions]
                                     |alexa-ask-sdk = "2.71.0"
                                     |aws-java-sdk-v1 = "1.12.505"
                                     |aws-java-sdk-v2 = "2.20.102"
                                     |aws-lambda = "1.2.2"
                                     |aws-lambda-events = "3.11.2"
                                     |aws-lambda-java-serialization = "1.1.2"
                                     |dekorate = "3.7.0"
                                     |junit = "5.9.10"
                                     |ksp = "1.9.22-1.0.17"
                                     |micronaut-aws = "4.0.1"
                                     |micronaut-test-bom-module = "1.2.3"
                                     |
                                     |[libraries]
                                     |alexa-ask-sdk = {group = "com.amazon.alexa", name = "ask-sdk", version.ref = "alexa-ask-sdk" }
                                     |alexa-ask-sdk-core = {group = "com.amazon.alexa", name = "ask-sdk-core", version.ref = "alexa-ask-sdk" }
                                     |alexa-ask-sdk-lambda = {group = "com.amazon.alexa", name = "ask-sdk-lambda-support", version.ref = "alexa-ask-sdk" }
                                     |aws-java-sdk-core = {group = "com.amazonaws", name = "aws-java-sdk-core", version.ref = "aws-java-sdk-v1" }
                                     |aws-lambda-core = {group = "com.amazonaws", name = "aws-lambda-java-core", version.ref = "aws-lambda" }
                                     |aws-lambda-events = {group = "com.amazonaws", name = "aws-lambda-java-events", version.ref = "aws-lambda-events" }
                                     |aws-lambda-java-serialization = {group = "com.amazonaws", name = "aws-lambda-java-serialization", version.ref = "aws-lambda-java-serialization" }
                                     |awssdk-secretsmanager = {group = "software.amazon.awssdk", name = "secretsmanager", version.ref = "aws-java-sdk-v2" }
                                     |boms-junit = {group = "org.junit", name = "junit-bom", version.ref = "junit" }
                                     |dekorate = {group = "io.dekorate", name = "dekorate-project", version.ref = "dekorate" }
                                     |micronaut-aws-alexa = {group = "io.micronaut.aws", name = "micronaut-aws-alexa", version.ref = "micronaut-aws" }
                                     |micronaut-aws-alexa-httpserver = {group = "io.micronaut.aws", name = "micronaut-aws-alexa-httpserver", version.ref = "micronaut-aws" }
                                     |micronaut-aws-apigateway = {group = "io.micronaut.aws", name = "micronaut-aws-apigateway", version.ref = "micronaut-aws" }
                                     |micronaut-aws-bom = {group = "io.micronaut.aws", name = "micronaut-aws-bom", version.ref = "micronaut-aws" }
                                     |micronaut-aws-cloudwatch-logging = {group = "io.micronaut.aws", name = "micronaut-aws-cloudwatch-logging", version.ref = "micronaut-aws" }
                                     |micronaut-aws-common = {group = "io.micronaut.aws", name = "micronaut-aws-common", version.ref = "micronaut-aws" }
                                     |micronaut-aws-distributed-configuration = {group = "io.micronaut.aws", name = "micronaut-aws-distributed-configuration", version.ref = "micronaut-aws" }
                                     |micronaut-aws-lambda-events-serde = {group = "io.micronaut.aws", name = "micronaut-aws-lambda-events-serde", version.ref = "micronaut-aws" }
                                     |micronaut-aws-parameter-store = {group = "io.micronaut.aws", name = "micronaut-aws-parameter-store", version.ref = "micronaut-aws" }
                                     |micronaut-aws-sdk-v1 = {group = "io.micronaut.aws", name = "micronaut-aws-sdk-v1", version.ref = "micronaut-aws" }
                                     |micronaut-aws-sdk-v2 = {group = "io.micronaut.aws", name = "micronaut-aws-sdk-v2", version.ref = "micronaut-aws" }
                                     |micronaut-aws-secretsmanager = {group = "io.micronaut.aws", name = "micronaut-aws-secretsmanager", version.ref = "micronaut-aws" }
                                     |micronaut-aws-service-discovery = {group = "io.micronaut.aws", name = "micronaut-aws-service-discovery", version.ref = "micronaut-aws" }
                                     |micronaut-aws-ua = {group = "io.micronaut.aws", name = "micronaut-aws-ua", version.ref = "micronaut-aws" }
                                     |micronaut-function-aws = {group = "io.micronaut.aws", name = "micronaut-function-aws", version.ref = "micronaut-aws" }
                                     |micronaut-function-aws-alexa = {group = "io.micronaut.aws", name = "micronaut-function-aws-alexa", version.ref = "micronaut-aws" }
                                     |micronaut-function-aws-api-proxy = {group = "io.micronaut.aws", name = "micronaut-function-aws-api-proxy", version.ref = "micronaut-aws" }
                                     |micronaut-function-aws-api-proxy-test = {group = "io.micronaut.aws", name = "micronaut-function-aws-api-proxy-test", version.ref = "micronaut-aws" }
                                     |micronaut-function-aws-custom-runtime = {group = "io.micronaut.aws", name = "micronaut-function-aws-custom-runtime", version.ref = "micronaut-aws" }
                                     |micronaut-function-aws-test = {group = "io.micronaut.aws", name = "micronaut-function-aws-test", version.ref = "micronaut-aws" }
                                     |micronaut-function-client-aws = {group = "io.micronaut.aws", name = "micronaut-function-client-aws", version.ref = "micronaut-aws" }
                                     |micronaut-test-bom-module = {group = "io.micronaut.dummy", name = "micronaut-test-bom-module", version.ref = "micronaut-test-bom-module" }
                                     |
                                     |[plugins]
                                     |hard-versioned = {id = "some.other.id", version = "1.2.3" }
                                     |ksp = {id = "com.google.devtools.ksp", version.ref = "ksp" }
                                     """.stripMargin().trim()

        and:
        def pomFile = new File(moduleDir, "micronaut-test-bom-module-1.2.3.pom")
        new XmlSlurper().parse(pomFile)
                .properties
                .childNodes()
                .collectEntries { node -> [node.name(), node.text()] } == [
                'alexa.ask.sdk.version'                : '2.71.0',
                'aws.java.sdk.v1.version'              : '1.12.505',
                'aws.java.sdk.v2.version'              : '2.20.102',
                'aws.lambda.events.version'            : '3.11.2',
                'aws.lambda.java.serialization.version': '1.1.2',
                'aws.lambda.version'                   : '1.2.2',
                'dekorate.version'                     : '3.7.0',
                'junit.version'                        : '5.9.10',
                'ksp.version'                          : '1.9.22-1.0.17',
                'micronaut.aws.version'                : '4.0.1',
        ]
    }

    def "can restrict the set of inlined aliases in a catalog"() {
        
        given:
        withSample("test-bom-module")
        buildFile << """
            micronautBom {
                inlinedAliases.put("micronaut-aws-bom", 
                    ["aws-lambda*"] as Set
                )
            }
        """

        when:
        run 'publishAllPublicationsToBuildRepository'

        then:
        def moduleDir = file("build/repo/io/micronaut/dummy/micronaut-test-bom-module/1.2.3")
        def catalogFile = new File(moduleDir, "micronaut-test-bom-module-1.2.3.toml")
        moduleDir.exists()
        catalogFile.exists()
        catalogFile.text.trim() == """#
                                     |# This file has been generated by Gradle and is intended to be consumed by Gradle
                                     |#
                                     |[metadata]
                                     |format.version = "1.1"
                                     |
                                     |[versions]
                                     |aws-lambda = "1.2.2"
                                     |aws-lambda-events = "3.11.2"
                                     |aws-lambda-java-serialization = "1.1.2"
                                     |dekorate = "3.7.0"
                                     |junit = "5.9.10"
                                     |ksp = "1.9.22-1.0.17"
                                     |micronaut-aws = "4.0.1"
                                     |micronaut-test-bom-module = "1.2.3"
                                     |
                                     |[libraries]
                                     |aws-lambda-core = {group = "com.amazonaws", name = "aws-lambda-java-core", version.ref = "aws-lambda" }
                                     |aws-lambda-events = {group = "com.amazonaws", name = "aws-lambda-java-events", version.ref = "aws-lambda-events" }
                                     |aws-lambda-java-serialization = {group = "com.amazonaws", name = "aws-lambda-java-serialization", version.ref = "aws-lambda-java-serialization" }
                                     |boms-junit = {group = "org.junit", name = "junit-bom", version.ref = "junit" }
                                     |dekorate = {group = "io.dekorate", name = "dekorate-project", version.ref = "dekorate" }
                                     |micronaut-test-bom-module = {group = "io.micronaut.dummy", name = "micronaut-test-bom-module", version.ref = "micronaut-test-bom-module" }
                                     |
                                     |[plugins]
                                     |hard-versioned = {id = "some.other.id", version = "1.2.3" }
                                     |ksp = {id = "com.google.devtools.ksp", version.ref = "ksp" }
                                     """.stripMargin().trim()

        and:
        def pomFile = new File(moduleDir, "micronaut-test-bom-module-1.2.3.pom")
        new XmlSlurper().parse(pomFile)
                .properties
                .childNodes()
                .collectEntries { node -> [node.name(), node.text()] } == [
                'aws.lambda.events.version'            : '3.11.2',
                'aws.lambda.java.serialization.version': '1.1.2',
                'aws.lambda.version'                   : '1.2.2',
                'dekorate.version'                     : '3.7.0',
                'junit.version'                        : '5.9.10',
                'ksp.version'                          : '1.9.22-1.0.17',
                'micronaut.aws.version'                : '4.0.1',
        ]
    }

    def "can inline a (non Micronaut) BOM"() {
        
        given:
        withSample("test-bom-external-inlining")
        buildFile << """
            micronautBom {
                inlineRegularBOMs = true
            }
        """

        when:
        run 'publishAllPublicationsToBuildRepository'

        then:
        def moduleDir = file("build/repo/io/micronaut/dummy/micronaut-test-bom-external-inlining/1.2.3")
        def catalogFile = new File(moduleDir, "micronaut-test-bom-external-inlining-1.2.3.toml")
        moduleDir.exists()
        catalogFile.exists()
        catalogFile.text.trim() == """#
                                     |# This file has been generated by Gradle and is intended to be consumed by Gradle
                                     |#
                                     |[metadata]
                                     |format.version = "1.1"
                                     |
                                     |[versions]
                                     |junit = "5.10.2"
                                     |junit-jupiter = "5.10.2"
                                     |junit-jupiter-api = "5.10.2"
                                     |junit-jupiter-engine = "5.10.2"
                                     |junit-jupiter-migrationsupport = "5.10.2"
                                     |junit-jupiter-params = "5.10.2"
                                     |junit-platform-commons = "1.10.2"
                                     |junit-platform-console = "1.10.2"
                                     |junit-platform-engine = "1.10.2"
                                     |junit-platform-jfr = "1.10.2"
                                     |junit-platform-launcher = "1.10.2"
                                     |junit-platform-reporting = "1.10.2"
                                     |junit-platform-runner = "1.10.2"
                                     |junit-platform-suite = "1.10.2"
                                     |junit-platform-suite-api = "1.10.2"
                                     |junit-platform-suite-commons = "1.10.2"
                                     |junit-platform-suite-engine = "1.10.2"
                                     |junit-platform-testkit = "1.10.2"
                                     |junit-vintage-engine = "5.10.2"
                                     |micronaut-test-bom-external-inlining = "1.2.3"
                                     |
                                     |[libraries]
                                     |boms-junit = {group = "org.junit", name = "junit-bom", version.ref = "junit" }
                                     |junit-jupiter = {group = "org.junit.jupiter", name = "junit-jupiter", version.ref = "junit-jupiter" }
                                     |junit-jupiter-api = {group = "org.junit.jupiter", name = "junit-jupiter-api", version.ref = "junit-jupiter-api" }
                                     |junit-jupiter-engine = {group = "org.junit.jupiter", name = "junit-jupiter-engine", version.ref = "junit-jupiter-engine" }
                                     |junit-jupiter-migrationsupport = {group = "org.junit.jupiter", name = "junit-jupiter-migrationsupport", version.ref = "junit-jupiter-migrationsupport" }
                                     |junit-jupiter-params = {group = "org.junit.jupiter", name = "junit-jupiter-params", version.ref = "junit-jupiter-params" }
                                     |junit-platform-commons = {group = "org.junit.platform", name = "junit-platform-commons", version.ref = "junit-platform-commons" }
                                     |junit-platform-console = {group = "org.junit.platform", name = "junit-platform-console", version.ref = "junit-platform-console" }
                                     |junit-platform-engine = {group = "org.junit.platform", name = "junit-platform-engine", version.ref = "junit-platform-engine" }
                                     |junit-platform-jfr = {group = "org.junit.platform", name = "junit-platform-jfr", version.ref = "junit-platform-jfr" }
                                     |junit-platform-launcher = {group = "org.junit.platform", name = "junit-platform-launcher", version.ref = "junit-platform-launcher" }
                                     |junit-platform-reporting = {group = "org.junit.platform", name = "junit-platform-reporting", version.ref = "junit-platform-reporting" }
                                     |junit-platform-runner = {group = "org.junit.platform", name = "junit-platform-runner", version.ref = "junit-platform-runner" }
                                     |junit-platform-suite = {group = "org.junit.platform", name = "junit-platform-suite", version.ref = "junit-platform-suite" }
                                     |junit-platform-suite-api = {group = "org.junit.platform", name = "junit-platform-suite-api", version.ref = "junit-platform-suite-api" }
                                     |junit-platform-suite-commons = {group = "org.junit.platform", name = "junit-platform-suite-commons", version.ref = "junit-platform-suite-commons" }
                                     |junit-platform-suite-engine = {group = "org.junit.platform", name = "junit-platform-suite-engine", version.ref = "junit-platform-suite-engine" }
                                     |junit-platform-testkit = {group = "org.junit.platform", name = "junit-platform-testkit", version.ref = "junit-platform-testkit" }
                                     |junit-vintage-engine = {group = "org.junit.vintage", name = "junit-vintage-engine", version.ref = "junit-vintage-engine" }
                                     |micronaut-test-bom-external-inlining = {group = "io.micronaut.dummy", name = "micronaut-test-bom-external-inlining", version.ref = "micronaut-test-bom-external-inlining" }
                                     """.stripMargin().trim()

        and:
        def pomFile = new File(moduleDir, "micronaut-test-bom-external-inlining-1.2.3.pom")
        def mavenProperties = new XmlSlurper().parse(pomFile)
                .properties
                .childNodes()
                .collectEntries { node -> [node.name(), node.text()] }
        mavenProperties.get('junit.jupiter.api.version') == '5.10.2'
        mavenProperties.get('junit.platform.suite.version') == '1.10.2'
    }

    @Unroll
    def "can exclude an alias when inlining Micronaut catalogs into the generated catalog"() {
        given:
        withSample("test-bom-module")
        buildFile << """
        micronautBom {
            $notation
        }
        """
        when:
        run 'publishAllPublicationsToBuildRepository'

        then:
        def moduleDir = file("build/repo/io/micronaut/dummy/micronaut-test-bom-module/1.2.3")
        def catalogFile = new File(moduleDir, "micronaut-test-bom-module-1.2.3.toml")
        moduleDir.exists()
        catalogFile.exists()
        catalogFile.text.trim() == """#
# This file has been generated by Gradle and is intended to be consumed by Gradle
#
[metadata]
format.version = "1.1"

[versions]
alexa-ask-sdk = "2.71.0"
aws-java-sdk-v1 = "1.12.505"
aws-java-sdk-v2 = "2.20.102"
aws-lambda = "1.2.2"
aws-lambda-events = "3.11.2"
aws-lambda-java-serialization = "1.1.2"
dekorate = "3.7.0"
junit = "5.9.10"
ksp = "1.9.22-1.0.17"
micronaut-aws = "4.0.1"
micronaut-test-bom-module = "1.2.3"

[libraries]
alexa-ask-sdk = {group = "com.amazon.alexa", name = "ask-sdk", version.ref = "alexa-ask-sdk" }
alexa-ask-sdk-core = {group = "com.amazon.alexa", name = "ask-sdk-core", version.ref = "alexa-ask-sdk" }
alexa-ask-sdk-lambda = {group = "com.amazon.alexa", name = "ask-sdk-lambda-support", version.ref = "alexa-ask-sdk" }
aws-java-sdk-core = {group = "com.amazonaws", name = "aws-java-sdk-core", version.ref = "aws-java-sdk-v1" }
aws-lambda-core = {group = "com.amazonaws", name = "aws-lambda-java-core", version.ref = "aws-lambda" }
aws-lambda-events = {group = "com.amazonaws", name = "aws-lambda-java-events", version.ref = "aws-lambda-events" }
aws-lambda-java-serialization = {group = "com.amazonaws", name = "aws-lambda-java-serialization", version.ref = "aws-lambda-java-serialization" }
awssdk-secretsmanager = {group = "software.amazon.awssdk", name = "secretsmanager", version.ref = "aws-java-sdk-v2" }
boms-junit = {group = "org.junit", name = "junit-bom", version.ref = "junit" }
dekorate = {group = "io.dekorate", name = "dekorate-project", version.ref = "dekorate" }
micronaut-aws-alexa = {group = "io.micronaut.aws", name = "micronaut-aws-alexa", version.ref = "micronaut-aws" }
micronaut-aws-alexa-httpserver = {group = "io.micronaut.aws", name = "micronaut-aws-alexa-httpserver", version.ref = "micronaut-aws" }
micronaut-aws-apigateway = {group = "io.micronaut.aws", name = "micronaut-aws-apigateway", version.ref = "micronaut-aws" }
micronaut-aws-bom = {group = "io.micronaut.aws", name = "micronaut-aws-bom", version.ref = "micronaut-aws" }
micronaut-aws-cloudwatch-logging = {group = "io.micronaut.aws", name = "micronaut-aws-cloudwatch-logging", version.ref = "micronaut-aws" }
micronaut-aws-distributed-configuration = {group = "io.micronaut.aws", name = "micronaut-aws-distributed-configuration", version.ref = "micronaut-aws" }
micronaut-aws-lambda-events-serde = {group = "io.micronaut.aws", name = "micronaut-aws-lambda-events-serde", version.ref = "micronaut-aws" }
micronaut-aws-parameter-store = {group = "io.micronaut.aws", name = "micronaut-aws-parameter-store", version.ref = "micronaut-aws" }
micronaut-aws-sdk-v1 = {group = "io.micronaut.aws", name = "micronaut-aws-sdk-v1", version.ref = "micronaut-aws" }
micronaut-aws-sdk-v2 = {group = "io.micronaut.aws", name = "micronaut-aws-sdk-v2", version.ref = "micronaut-aws" }
micronaut-aws-secretsmanager = {group = "io.micronaut.aws", name = "micronaut-aws-secretsmanager", version.ref = "micronaut-aws" }
micronaut-aws-service-discovery = {group = "io.micronaut.aws", name = "micronaut-aws-service-discovery", version.ref = "micronaut-aws" }
micronaut-aws-ua = {group = "io.micronaut.aws", name = "micronaut-aws-ua", version.ref = "micronaut-aws" }
micronaut-function-aws = {group = "io.micronaut.aws", name = "micronaut-function-aws", version.ref = "micronaut-aws" }
micronaut-function-aws-alexa = {group = "io.micronaut.aws", name = "micronaut-function-aws-alexa", version.ref = "micronaut-aws" }
micronaut-function-aws-api-proxy = {group = "io.micronaut.aws", name = "micronaut-function-aws-api-proxy", version.ref = "micronaut-aws" }
micronaut-function-aws-api-proxy-test = {group = "io.micronaut.aws", name = "micronaut-function-aws-api-proxy-test", version.ref = "micronaut-aws" }
micronaut-function-aws-custom-runtime = {group = "io.micronaut.aws", name = "micronaut-function-aws-custom-runtime", version.ref = "micronaut-aws" }
micronaut-function-aws-test = {group = "io.micronaut.aws", name = "micronaut-function-aws-test", version.ref = "micronaut-aws" }
micronaut-function-client-aws = {group = "io.micronaut.aws", name = "micronaut-function-client-aws", version.ref = "micronaut-aws" }
micronaut-test-bom-module = {group = "io.micronaut.dummy", name = "micronaut-test-bom-module", version.ref = "micronaut-test-bom-module" }

[plugins]
hard-versioned = {id = "some.other.id", version = "1.2.3" }
ksp = {id = "com.google.devtools.ksp", version.ref = "ksp" }
""".trim()

        and:
        def pomFile = new File(moduleDir, "micronaut-test-bom-module-1.2.3.pom")
        pomFile.exists()
        pomFile.text.trim().contains """<properties>
    <alexa.ask.sdk.version>2.71.0</alexa.ask.sdk.version>
    <aws.java.sdk.v1.version>1.12.505</aws.java.sdk.v1.version>
    <aws.java.sdk.v2.version>2.20.102</aws.java.sdk.v2.version>
    <aws.lambda.events.version>3.11.2</aws.lambda.events.version>
    <aws.lambda.java.serialization.version>1.1.2</aws.lambda.java.serialization.version>
    <aws.lambda.version>1.2.2</aws.lambda.version>
    <dekorate.version>3.7.0</dekorate.version>
    <junit.version>5.9.10</junit.version>
    <ksp.version>1.9.22-1.0.17</ksp.version>
    <micronaut.aws.version>4.0.1</micronaut.aws.version>
  </properties>"""

        where:
        notation << [
                'excludedInlinedAliases.add("micronaut-aws-common")',
                'excludeFromInlining("*", "micronaut-aws-common")',
                'excludeFromInlining("micronaut-aws-bom", "micronaut-aws-common")'
        ]
    }

    @Issue("https://github.com/micronaut-projects/micronaut-build/issues/284")
    def "uses a single version for all subprojects"() {
        withSample("multi-project-bom")
        settingsFile.text += """rootProject.name = '$rootName' """

        when:
        run 'publishAllPublicationsToBuildRepository'

        then:
        def moduleDir = file("build/repo/io/micronaut/freedom/micronaut-freedom-bom/1.2.3")
        def catalogFile = new File(moduleDir, "micronaut-freedom-bom-1.2.3.toml")
        moduleDir.exists()
        catalogFile.exists()
        println catalogFile.text
        catalogFile.text.trim() == """#
# This file has been generated by Gradle and is intended to be consumed by Gradle
#
[metadata]
format.version = "1.1"

[versions]
micronaut-freedom = "1.2.3"

[libraries]
micronaut-freedom-bar = {group = "io.micronaut.freedom", name = "micronaut-freedom-bar", version.ref = "micronaut-freedom" }
micronaut-freedom-bom = {group = "io.micronaut.freedom", name = "micronaut-freedom-bom", version.ref = "micronaut-freedom" }
micronaut-freedom-foo = {group = "io.micronaut.freedom", name = "micronaut-freedom-foo", version.ref = "micronaut-freedom" }
""".trim()

        and:
        def pomFile = new File(moduleDir, "micronaut-freedom-bom-1.2.3.pom")
        pomFile.exists()
        println pomFile.text
        pomFile.text.contains """<properties>
    <micronaut.freedom.version>1.2.3</micronaut.freedom.version>
  </properties>"""
        pomFile.text.contains """<dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>io.micronaut.freedom</groupId>
        <artifactId>micronaut-freedom-bar</artifactId>
        <version>\${micronaut.freedom.version}</version>
      </dependency>
      <dependency>
        <groupId>io.micronaut.freedom</groupId>
        <artifactId>micronaut-freedom-foo</artifactId>
        <version>\${micronaut.freedom.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>"""

        where:
        rootName << ['freedom', 'freedom-parent']
    }

    @Issue("https://github.com/micronaut-projects/micronaut-build/issues/284")
    def "can explicitly define the main property name"() {
        withSample("multi-project-bom")
        settingsFile.text += """rootProject.name = '$rootName' """
        file("freedom-bom/build.gradle") << """
micronautBom {
   propertyName = 'democracy'
}
        """

        when:
        run 'publishAllPublicationsToBuildRepository'

        then:
        def moduleDir = file("build/repo/io/micronaut/freedom/micronaut-freedom-bom/1.2.3")
        def catalogFile = new File(moduleDir, "micronaut-freedom-bom-1.2.3.toml")
        moduleDir.exists()
        catalogFile.exists()
        println catalogFile.text
        catalogFile.text.trim() == """#
# This file has been generated by Gradle and is intended to be consumed by Gradle
#
[metadata]
format.version = "1.1"

[versions]
micronaut-democracy = "1.2.3"

[libraries]
micronaut-freedom-bar = {group = "io.micronaut.freedom", name = "micronaut-freedom-bar", version.ref = "micronaut-democracy" }
micronaut-freedom-bom = {group = "io.micronaut.freedom", name = "micronaut-freedom-bom", version.ref = "micronaut-democracy" }
micronaut-freedom-foo = {group = "io.micronaut.freedom", name = "micronaut-freedom-foo", version.ref = "micronaut-democracy" }
""".trim()

        and:
        def pomFile = new File(moduleDir, "micronaut-freedom-bom-1.2.3.pom")
        pomFile.exists()
        println pomFile.text
        pomFile.text.contains """<properties>
    <micronaut.democracy.version>1.2.3</micronaut.democracy.version>
  </properties>"""
        pomFile.text.contains """<dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>io.micronaut.freedom</groupId>
        <artifactId>micronaut-freedom-bar</artifactId>
        <version>\${micronaut.democracy.version}</version>
      </dependency>
      <dependency>
        <groupId>io.micronaut.freedom</groupId>
        <artifactId>micronaut-freedom-foo</artifactId>
        <version>\${micronaut.democracy.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>"""

        where:
        rootName << ['freedom', 'freedom-parent']
    }
}
