package io.micronaut.build.catalogs

import io.micronaut.build.AbstractFunctionalTest 

class BomGenerationFunctionalTest extends AbstractFunctionalTest {
    def "inlines Micronaut catalogs into the generated catalog"() {
        given:
        withSample("test-bom-module")

        when:
        run 'publishAllPublicationsToBuildRepository'

        then:
        def moduleDir = file("build/repo/io/micronaut/dummy/micronaut-test-bom-module/1.2.3")
        def catalogFile = new File(moduleDir, "micronaut-test-bom-module-1.2.3.toml")
        moduleDir.exists()
        catalogFile.exists()
        catalogFile.text.trim() == """
#
# This file has been generated by Gradle and is intended to be consumed by Gradle
#
[metadata]
format.version = "1.1"

[versions]
dekorate = "1.0.3"
micronaut-aws = "3.1.1"
micronaut-test-bom-module = "1.2.3"

[libraries]
dekorate = {group = "io.dekorate", name = "dekorate-project", version.ref = "dekorate" }
micronaut-aws-alexa = {group = "io.micronaut.aws", name = "micronaut-aws-alexa", version = "" }
micronaut-aws-alexa-httpserver = {group = "io.micronaut.aws", name = "micronaut-aws-alexa-httpserver", version = "" }
micronaut-aws-bom = {group = "io.micronaut.aws", name = "micronaut-aws-bom", version = "" }
micronaut-aws-common = {group = "io.micronaut.aws", name = "micronaut-aws-common", version = "" }
micronaut-aws-distributed-configuration = {group = "io.micronaut.aws", name = "micronaut-aws-distributed-configuration", version = "" }
micronaut-aws-parameter-store = {group = "io.micronaut.aws", name = "micronaut-aws-parameter-store", version = "" }
micronaut-aws-sdk-v1 = {group = "io.micronaut.aws", name = "micronaut-aws-sdk-v1", version = "" }
micronaut-aws-sdk-v2 = {group = "io.micronaut.aws", name = "micronaut-aws-sdk-v2", version = "" }
micronaut-aws-secretsmanager = {group = "io.micronaut.aws", name = "micronaut-aws-secretsmanager", version = "" }
micronaut-aws-service-discovery = {group = "io.micronaut.aws", name = "micronaut-aws-service-discovery", version = "" }
micronaut-function-aws = {group = "io.micronaut.aws", name = "micronaut-function-aws", version = "" }
micronaut-function-aws-alexa = {group = "io.micronaut.aws", name = "micronaut-function-aws-alexa", version = "" }
micronaut-function-aws-api-proxy = {group = "io.micronaut.aws", name = "micronaut-function-aws-api-proxy", version = "" }
micronaut-function-aws-api-proxy-test = {group = "io.micronaut.aws", name = "micronaut-function-aws-api-proxy-test", version = "" }
micronaut-function-aws-custom-runtime = {group = "io.micronaut.aws", name = "micronaut-function-aws-custom-runtime", version = "" }
micronaut-function-aws-test = {group = "io.micronaut.aws", name = "micronaut-function-aws-test", version = "" }
micronaut-function-client-aws = {group = "io.micronaut.aws", name = "micronaut-function-client-aws", version = "" }
micronaut-test-bom-module = {group = "io.micronaut.dummy", name = "micronaut-test-bom-module", version.ref = "micronaut-test-bom-module" }
""".trim()
    }

    def "can exclude an alias when inlining Micronaut catalogs into the generated catalog"() {
        given:
        withSample("test-bom-module")
        buildFile << """
        micronautBom {
            excludedInlinedAliases.add("micronaut-aws-common")
        }
        """
        when:
        run 'publishAllPublicationsToBuildRepository'

        then:
        def moduleDir = file("build/repo/io/micronaut/dummy/micronaut-test-bom-module/1.2.3")
        def catalogFile = new File(moduleDir, "micronaut-test-bom-module-1.2.3.toml")
        moduleDir.exists()
        catalogFile.exists()
        catalogFile.text.trim() == """
#
# This file has been generated by Gradle and is intended to be consumed by Gradle
#
[metadata]
format.version = "1.1"

[versions]
dekorate = "1.0.3"
micronaut-aws = "3.1.1"
micronaut-test-bom-module = "1.2.3"

[libraries]
dekorate = {group = "io.dekorate", name = "dekorate-project", version.ref = "dekorate" }
micronaut-aws-alexa = {group = "io.micronaut.aws", name = "micronaut-aws-alexa", version = "" }
micronaut-aws-alexa-httpserver = {group = "io.micronaut.aws", name = "micronaut-aws-alexa-httpserver", version = "" }
micronaut-aws-bom = {group = "io.micronaut.aws", name = "micronaut-aws-bom", version = "" }
micronaut-aws-distributed-configuration = {group = "io.micronaut.aws", name = "micronaut-aws-distributed-configuration", version = "" }
micronaut-aws-parameter-store = {group = "io.micronaut.aws", name = "micronaut-aws-parameter-store", version = "" }
micronaut-aws-sdk-v1 = {group = "io.micronaut.aws", name = "micronaut-aws-sdk-v1", version = "" }
micronaut-aws-sdk-v2 = {group = "io.micronaut.aws", name = "micronaut-aws-sdk-v2", version = "" }
micronaut-aws-secretsmanager = {group = "io.micronaut.aws", name = "micronaut-aws-secretsmanager", version = "" }
micronaut-aws-service-discovery = {group = "io.micronaut.aws", name = "micronaut-aws-service-discovery", version = "" }
micronaut-function-aws = {group = "io.micronaut.aws", name = "micronaut-function-aws", version = "" }
micronaut-function-aws-alexa = {group = "io.micronaut.aws", name = "micronaut-function-aws-alexa", version = "" }
micronaut-function-aws-api-proxy = {group = "io.micronaut.aws", name = "micronaut-function-aws-api-proxy", version = "" }
micronaut-function-aws-api-proxy-test = {group = "io.micronaut.aws", name = "micronaut-function-aws-api-proxy-test", version = "" }
micronaut-function-aws-custom-runtime = {group = "io.micronaut.aws", name = "micronaut-function-aws-custom-runtime", version = "" }
micronaut-function-aws-test = {group = "io.micronaut.aws", name = "micronaut-function-aws-test", version = "" }
micronaut-function-client-aws = {group = "io.micronaut.aws", name = "micronaut-function-client-aws", version = "" }
micronaut-test-bom-module = {group = "io.micronaut.dummy", name = "micronaut-test-bom-module", version.ref = "micronaut-test-bom-module" }
""".trim()
    }
}
